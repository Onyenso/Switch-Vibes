"""This file converts Spotify to YT."""
import re
import json
from spotipy import Spotify, SpotifyOAuth
from ytmusicapi import YTMusic, setup
from decouple import config

from switch_vibes.utils import string_similarity, list_similarity
from switch_vibes import constants


spotify_scope = ["playlist-modify-private", "playlist-modify-public"]

auth_manager = SpotifyOAuth(
    client_id=config("SPOTIPY_CLIENT_ID"),
    client_secret=config("SPOTIPY_CLIENT_SECRET"),
    scope=spotify_scope, redirect_uri=config("SPOTIFY_REDIRECT_URI"),
    show_dialog=True,
)

sp = Spotify(auth_manager=auth_manager)
yt = YTMusic(auth="switch_vibes/headers_auth3.json")


def get_spotify_id_from_url(url):
    """
    Gets the id of a Spotify playlist from the playlist's URL.

    :param url: a string representing the URL of the playlist.

    :return id: a string representing the id of the playlist.
    """
    sp_link = re.findall(constants.SP_REGEX, url)
    if not sp_link: return None
    sp_link = sp_link[0][0]
    sp_playlist_id = sp_link.split("playlist/")[1].split("?")[0]
    return sp_playlist_id


def get_spotify_playlist(playlist_id):
    """
    Gets a Spotify playlist's raw data and pareses it and returns a dictionary which
    includes a key, items, whose value is a list of dictionaries. Each dictionary in this list
    represents a track from the Spotify playlist.

    :param playlist_id: a string representing the id of the playlist.

    :return parsed_playlist_tracks: a dictionary which includes a list of dictionaries,
    where each dictionary represents a track.

    E.g. of a return value might look like:
    {
        "id": "0Mpj7oqduJ24uMGy5tC8ff",
        "name": "AlphaDev's playlist",
        "tracks": {
            "items": [
                {
                    "track": {
                        "artists": [
                            {
                                "name": "John Legend"
                            },
                            {
                                "name": "Ludacris"
                            }
                        ],
                        "duration_ms": 239453,
                        "name": "Tonight (Best You Ever Had) (feat. Ludacris)"
                    }
                }
            ]
            next: None
        },
    }
    """
    print("\n================Searching Spotify========================\n")

    # Get the first 100 tracks from playlist
    try:
        parsed_playlist_tracks = sp.playlist(
            playlist_id=playlist_id,
            fields="id,name,tracks.items(track(name,duration_ms,artists(name))),tracks.next",
        )
    except Exception as e:
        if "404" in str(e):
            return ["404"]
        else: return None

    next = parsed_playlist_tracks["tracks"]["next"]
    offset = 0

    # Get the remaining tracks, 100 at a time, if there's more
    while next is not None:
        offset += 100

        next_tracks = sp.playlist_items(
            playlist_id=playlist_id,
            fields="items(track(name,artists(name),duration_ms)),next",
            offset=offset
        )

        parsed_playlist_tracks["tracks"]["items"].extend(next_tracks["items"])
        next = next_tracks["next"]
        parsed_playlist_tracks["tracks"]["next"] = next

    print("\n================Spotify Done========================\n")
    return parsed_playlist_tracks


def convert_spotify_to_yt(spotify_playlist):

    if "404" in spotify_playlist: return ["404"]
    elif not spotify_playlist: return None

    parsed_yt_playlist = []
    nulls = []
    sp_playlist_name = spotify_playlist["name"]
    sp_tracks = spotify_playlist["tracks"]["items"]

    print("\n================Searching YT Music========================\n")

    for sp_track in sp_tracks:
        sp_artists = ""

        for sp_artist in sp_track["track"]["artists"]:
            sp_artists += sp_artist["name"] + " "
            
        sp_artists = sp_artists.strip()
        q = f"{sp_track['track']['name']} {sp_artists}"

        yt_track = search_for_yt_track(
            query=q,
            title=sp_track["track"]["name"],
            artists=[artist['name'].lower() for artist in sp_track["track"]["artists"]],
            duration=int(sp_track["track"]["duration_ms"] / 1000),
            index=sp_tracks.index(sp_track)
        )
    
        parsed_yt_playlist.append(yt_track) if yt_track else nulls.append({
            "title": sp_track['track']["name"],
            "artists": sp_track['track']["artists"]
        })

    print("\n================YT Music Done========================\n")

    # Create yt playlist and add tracks
    yt_playlist = yt.create_playlist(
        title=sp_playlist_name,
        description="Generated by Switch Vibes.",
        privacy_status = 'UNLISTED',
        video_ids=[track["yt_id"] for track in parsed_yt_playlist]
    )

    data = {
        "link": f"https://music.youtube.com/playlist?list={yt_playlist}",
        "yt_playlist": parsed_yt_playlist,
        "nulls": nulls,
        "flagged": [{"title": track["title"], "artists": track["artists"]} for track in parsed_yt_playlist if track["flag"]]
    }

    print(f"YT Music Playlist: {data['link']}\n")

    if data["nulls"]:
        print(f"\n{len(data['nulls'])} tracks from the playlist were not found on YT Music:\n")
        for track in data["nulls"]:
            print(f"Title: {track['title']}\nArtist: {track['artists']}\n")
        
        print("============================================")
    
    if data["flagged"]:
        print(f"\nThe accuracy of {len(data['flagged'])} track(s) from the new YT Music playlist are low:\n")

        for track in data["flagged"]:
            print(f"Title: {track['title']}\nArtist: {track['artists']}\n")

        print("============================================")

    return data


def search_for_yt_track(query, title, artists, duration, index):
    yt_results = yt.search(query, filter="songs", limit=5)
    correct_track = None

    for yt_track in yt_results:
        yt_track_duration = yt_track["duration_seconds"]
        yt_track_title = yt_track["title"]
        yt_track_artists = [artist["name"].lower() for artist in yt_track["artists"]]
        yt_track_id = yt_track["videoId"]

        correct_artist = bool(
        string_similarity(yt_track_artists[0], artists[0]) >= 0.4 or \
        list_similarity(yt_track_artists, artists) >= (1 / max(len(yt_track_artists), len(artists))) or \
        string_similarity(str(yt_track_artists), str(artists)) >= 0.4
        )

        if (correct_artist and abs(yt_track_duration - duration) <= 5):
            flag = False

            # If string_similarity between song title from YT and Spotify is less than 0.5 OR
            # (string similarity between sole artists from YT and Spotify is less than 0.4 and
            # no similar artist in the list of artists from YT and Spotify)
            if string_similarity(yt_track_title, title) < 0.2 or \
            (string_similarity(yt_track_artists[0], artists[0]) <= 0.5 and
            list_similarity(yt_track_artists, artists) < (1 / max(len(yt_track_artists), len(artists)))):
                flag = True
            
            correct_track = {
                "title": yt_track_title,
                "artists": [artist["name"] for artist in yt_track["artists"]],
                "duration_seconds": yt_track_duration,
                "yt_id": yt_track_id,
                "yt_url": f"https://music.youtube.com/watch?v={yt_track_id}",
                "flag": flag
            }
            break

    print(f"{index + 1}) Found {correct_track['title']} on YT Music...") if correct_track else \
    print(f"{index + 1}) Didn't find {query} on YT Music...")
    return correct_track


# jamming of genitals
# url1 = "https://open.spotify.com/playlist/3U2CYL3s88SGois2GaOaB7?si=9ea0c94c9261499f"

# R & B
# url2 = https://open.spotify.com/playlist/3AyRHA5JC0QtHWHhdph1fb?si=44cc73ec9e444762

# AlphaDev's Playlist
# url3 = "https://open.spotify.com/playlist/0Mpj7oqduJ24uMGy5tC8ff?si=505779dcd2ca4e6e"

# spotify_playlist = get_spotify_playlist(get_spotify_id_from_url(url1))
# convert_spotify_to_yt(spotify_playlist)
